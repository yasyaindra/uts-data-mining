# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qTRAVXEevbgvd2TxO1kBuF_JFIE8cz1q
"""

import nltk
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from scipy.spatial.distance import cosine
import numpy as np
ps = PorterStemmer()

txt1 = '/content/drive/MyDrive/Tugas Kuliah/Data Mining/artikel1.txt'
txt2 = '/content/drive/MyDrive/Tugas Kuliah/Data Mining/artikel2.txt'
txt3 = '/content/drive/MyDrive/Tugas Kuliah/Data Mining/artikel3.txt'
txt4 = '/content/drive/MyDrive/Tugas Kuliah/Data Mining/artikel4.txt'

def open_txt(txt):
    data = open(txt, 'r')
    return data.read()

def turn_to_array(text):
    tokenized = []
    
    if '\n' in text:
        for word in text.split('\n'):
            tokenized.append(word)
    elif ' ' in text:     
        for word in text.split(' '):
            tokenized.append(word)
    return tokenized

artikel1 = open_txt(txt)

artikel1_array = turn_to_array(artikel1)

print(artikel1_array)

artikel1_stem = [ps.stem(a) for a in artikel1_array]

print(artikel1_stem)

artikel1 = open_txt(txt1)
artikel2 = open_txt(txt2)
artikel3 = open_txt(txt3)
artikel4 = open_txt(txt4)

documents = [
    artikel1,
    artikel2,
    artikel3,
    artikel4
]

# Inisialisasi objek TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer()

# Menghitung TF-IDF dari dokumen
tfidf_matrix = tfidf_vectorizer.fit_transform(documents)

# Mencetak kamus kata-kata unik
print("Kamus kata-kata:")
print(tfidf_vectorizer.get_feature_names_out())
print()

# Mencetak vektor TF-IDF untuk setiap dokumen
for i in range(len(documents)):
    print(f"TF-IDF vektor untuk Dokumen {i+1}:")
    print(tfidf_matrix[i].toarray())
    print()

print(tfidf_matrix[1].toarray())

vektor1 = tfidf_matrix[0].toarray()
vektor2 = tfidf_matrix[1].toarray()
vektor3 = tfidf_matrix[2].toarray()
vektor4 = tfidf_matrix[3].toarray()

vektors = np.array([vektor1, vektor2, vektor3, vektor4])

# Menghitung jarak Euclidean antara setiap pasangan vektor
distances = []
for i in range(len(vektors)):
    for j in range(i + 1, len(vektors)):
        distance = np.linalg.norm(vektors[i] - vektors[j])
        distances.append((i, j, distance))

# Mencetak hasil jarak Euclidean
for i, j, distance in distances:
    print(f"Jarak Euclidean antara vektor {i+1} dan vektor {j+1}: {distance}")

vektor1 = tfidf_matrix[0].toarray()
vektor2 = tfidf_matrix[1].toarray()
vektor3 = tfidf_matrix[2].toarray()
vektor4 = tfidf_matrix[3].toarray()

# Combining vectors into a 2D array
vektors = np.array([vektor1[0], vektor2[0], vektor3[0], vektor4[0]])

# Calculating cosine distance between each pair of vectors
distances = []
for i in range(len(vektors)):
    for j in range(i + 1, len(vektors)):
        distance = cosine(vektors[i], vektors[j])
        distances.append((i, j, distance))

# Printing the cosine distances
for i, j, distance in distances:
    print(f"Cosine distance between vector {i+1} and vector {j+1}: {distance}")